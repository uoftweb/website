/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as ContextModule from "./context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ArticleCreateInput: { // input type
    slug: string; // String!
    stargazers?: NexusGenInputs['UserCreateManyWithoutStarredArticlesInput'] | null; // UserCreateManyWithoutStarredArticlesInput
  }
  ArticleWhereUniqueInput: { // input type
    slug?: string | null; // String
  }
  UserCreateManyWithoutStarredArticlesInput: { // input type
    connect?: Array<NexusGenInputs['UserWhereUniqueInput'] | null> | null; // [UserWhereUniqueInput]
    create?: Array<NexusGenInputs['UserCreateWithoutStarredArticlesInput'] | null> | null; // [UserCreateWithoutStarredArticlesInput]
  }
  UserCreateWithoutStarredArticlesInput: { // input type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: string | null; // String
    emailVerified?: NexusGenScalars['DateTime'] | null; // DateTime
    image?: string | null; // String
    name?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  UserWhereUniqueInput: { // input type
    email?: string | null; // String
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenRootTypes {
  Article: { // root type
    slug: string; // String!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    id: number; // Int!
    image?: string | null; // String
    name?: string | null; // String
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  ArticleCreateInput: NexusGenInputs['ArticleCreateInput'];
  ArticleWhereUniqueInput: NexusGenInputs['ArticleWhereUniqueInput'];
  UserCreateManyWithoutStarredArticlesInput: NexusGenInputs['UserCreateManyWithoutStarredArticlesInput'];
  UserCreateWithoutStarredArticlesInput: NexusGenInputs['UserCreateWithoutStarredArticlesInput'];
  UserWhereUniqueInput: NexusGenInputs['UserWhereUniqueInput'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  DateTime: NexusGenScalars['DateTime'];
}

export interface NexusGenFieldTypes {
  Article: { // field return type
    slug: string; // String!
    stargazers: NexusGenRootTypes['User'][]; // [User!]!
  }
  Mutation: { // field return type
    createOneArticle: NexusGenRootTypes['Article']; // Article!
    starArticle: NexusGenRootTypes['Article'] | null; // Article
    unstarArticle: NexusGenRootTypes['Article'] | null; // Article
  }
  Query: { // field return type
    article: NexusGenRootTypes['Article'] | null; // Article
    articles: NexusGenRootTypes['Article'][]; // [Article!]!
    me: NexusGenRootTypes['User'] | null; // User
    user: NexusGenRootTypes['User'] | null; // User
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  User: { // field return type
    id: number; // Int!
    image: string | null; // String
    name: string | null; // String
    starredArticles: NexusGenRootTypes['Article'][]; // [Article!]!
  }
}

export interface NexusGenArgTypes {
  Article: {
    stargazers: { // args
      after?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      before?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Mutation: {
    createOneArticle: { // args
      data: NexusGenInputs['ArticleCreateInput']; // ArticleCreateInput!
    }
    starArticle: { // args
      slug: string; // String!
    }
    unstarArticle: { // args
      slug: string; // String!
    }
  }
  Query: {
    article: { // args
      where: NexusGenInputs['ArticleWhereUniqueInput']; // ArticleWhereUniqueInput!
    }
    articles: { // args
      after?: NexusGenInputs['ArticleWhereUniqueInput'] | null; // ArticleWhereUniqueInput
      before?: NexusGenInputs['ArticleWhereUniqueInput'] | null; // ArticleWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    user: { // args
      where: NexusGenInputs['UserWhereUniqueInput']; // UserWhereUniqueInput!
    }
    users: { // args
      after?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      before?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  User: {
    starredArticles: { // args
      after?: NexusGenInputs['ArticleWhereUniqueInput'] | null; // ArticleWhereUniqueInput
      before?: NexusGenInputs['ArticleWhereUniqueInput'] | null; // ArticleWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Article" | "Mutation" | "Query" | "User";

export type NexusGenInputNames = "ArticleCreateInput" | "ArticleWhereUniqueInput" | "UserCreateManyWithoutStarredArticlesInput" | "UserCreateWithoutStarredArticlesInput" | "UserWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ContextModule.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}