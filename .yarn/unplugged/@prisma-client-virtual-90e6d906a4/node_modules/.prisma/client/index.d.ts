import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.7.1
 * Query Engine version: 5c2ad460cf4fe8c9330e6640b266c046542c8b6a
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): AccountDelegate;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): SessionDelegate;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): UserDelegate;

  /**
   * `prisma.verificationRequest`: Exposes CRUD operations for the **VerificationRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationRequests
    * const verificationRequests = await prisma.verificationRequest.findMany()
    * ```
    */
  get verificationRequest(): VerificationRequestDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const AccountDistinctFieldEnum: {
  id: 'id',
  compoundId: 'compoundId',
  userId: 'userId',
  providerType: 'providerType',
  providerId: 'providerId',
  providerAccountId: 'providerAccountId',
  refreshToken: 'refreshToken',
  accessToken: 'accessToken',
  accessTokenExpires: 'accessTokenExpires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type AccountDistinctFieldEnum = (typeof AccountDistinctFieldEnum)[keyof typeof AccountDistinctFieldEnum]


export declare const SessionDistinctFieldEnum: {
  id: 'id',
  userId: 'userId',
  expires: 'expires',
  sessionToken: 'sessionToken',
  accessToken: 'accessToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type SessionDistinctFieldEnum = (typeof SessionDistinctFieldEnum)[keyof typeof SessionDistinctFieldEnum]


export declare const UserDistinctFieldEnum: {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type UserDistinctFieldEnum = (typeof UserDistinctFieldEnum)[keyof typeof UserDistinctFieldEnum]


export declare const VerificationRequestDistinctFieldEnum: {
  id: 'id',
  identifier: 'identifier',
  token: 'token',
  expires: 'expires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

export declare type VerificationRequestDistinctFieldEnum = (typeof VerificationRequestDistinctFieldEnum)[keyof typeof VerificationRequestDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]



/**
 * Model Account
 */

export type Account = {
  id: number
  compoundId: string
  userId: number
  providerType: string
  providerId: string
  providerAccountId: string
  refreshToken: string | null
  accessToken: string | null
  accessTokenExpires: Date | null
  createdAt: Date
  updatedAt: Date
}


export type AggregateAccount = {
  count: number
  avg: AccountAvgAggregateOutputType | null
  sum: AccountSumAggregateOutputType | null
  min: AccountMinAggregateOutputType | null
  max: AccountMaxAggregateOutputType | null
}

export type AccountAvgAggregateOutputType = {
  id: number
  userId: number
}

export type AccountSumAggregateOutputType = {
  id: number
  userId: number
}

export type AccountMinAggregateOutputType = {
  id: number
  userId: number
}

export type AccountMaxAggregateOutputType = {
  id: number
  userId: number
}


export type AccountAvgAggregateInputType = {
  id?: true
  userId?: true
}

export type AccountSumAggregateInputType = {
  id?: true
  userId?: true
}

export type AccountMinAggregateInputType = {
  id?: true
  userId?: true
}

export type AccountMaxAggregateInputType = {
  id?: true
  userId?: true
}

export type AggregateAccountArgs = {
  where?: AccountWhereInput
  orderBy?: Enumerable<AccountOrderByInput>
  cursor?: AccountWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<AccountDistinctFieldEnum>
  count?: true
  avg?: AccountAvgAggregateInputType
  sum?: AccountSumAggregateInputType
  min?: AccountMinAggregateInputType
  max?: AccountMaxAggregateInputType
}

export type GetAccountAggregateType<T extends AggregateAccountArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetAccountAggregateScalarType<T[P]>
}

export type GetAccountAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof AccountAvgAggregateOutputType ? AccountAvgAggregateOutputType[P] : never
}
    
    

export type AccountSelect = {
  id?: boolean
  compoundId?: boolean
  userId?: boolean
  providerType?: boolean
  providerId?: boolean
  providerAccountId?: boolean
  refreshToken?: boolean
  accessToken?: boolean
  accessTokenExpires?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AccountGetPayload<
  S extends boolean | null | undefined | AccountArgs,
  U = keyof S
> = S extends true
  ? Account
  : S extends undefined
  ? never
  : S extends AccountArgs | FindManyAccountArgs
  ? 'include' extends U
    ? Account 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Account ? Account[P]
: 
 never
    }
  : Account
: Account


export interface AccountDelegate {
  /**
   * Find zero or one Account.
   * @param {FindOneAccountArgs} args - Arguments to find a Account
   * @example
   * // Get one Account
   * const account = await prisma.account.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneAccountArgs>(
    args: Subset<T, FindOneAccountArgs>
  ): CheckSelect<T, Prisma__AccountClient<Account | null>, Prisma__AccountClient<AccountGetPayload<T> | null>>
  /**
   * Find zero or more Accounts.
   * @param {FindManyAccountArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Accounts
   * const accounts = await prisma.account.findMany()
   * 
   * // Get first 10 Accounts
   * const accounts = await prisma.account.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyAccountArgs>(
    args?: Subset<T, FindManyAccountArgs>
  ): CheckSelect<T, Promise<Array<Account>>, Promise<Array<AccountGetPayload<T>>>>
  /**
   * Create a Account.
   * @param {AccountCreateArgs} args - Arguments to create a Account.
   * @example
   * // Create one Account
   * const Account = await prisma.account.create({
   *   data: {
   *     // ... data to create a Account
   *   }
   * })
   * 
  **/
  create<T extends AccountCreateArgs>(
    args: Subset<T, AccountCreateArgs>
  ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>
  /**
   * Delete a Account.
   * @param {AccountDeleteArgs} args - Arguments to delete one Account.
   * @example
   * // Delete one Account
   * const Account = await prisma.account.delete({
   *   where: {
   *     // ... filter to delete one Account
   *   }
   * })
   * 
  **/
  delete<T extends AccountDeleteArgs>(
    args: Subset<T, AccountDeleteArgs>
  ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>
  /**
   * Update one Account.
   * @param {AccountUpdateArgs} args - Arguments to update one Account.
   * @example
   * // Update one Account
   * const account = await prisma.account.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends AccountUpdateArgs>(
    args: Subset<T, AccountUpdateArgs>
  ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>
  /**
   * Delete zero or more Accounts.
   * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
   * @example
   * // Delete a few Accounts
   * const { count } = await prisma.account.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends AccountDeleteManyArgs>(
    args: Subset<T, AccountDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Accounts.
   * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Accounts
   * const account = await prisma.account.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends AccountUpdateManyArgs>(
    args: Subset<T, AccountUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Account.
   * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
   * @example
   * // Update or create a Account
   * const account = await prisma.account.upsert({
   *   create: {
   *     // ... data to create a Account
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Account we want to update
   *   }
   * })
  **/
  upsert<T extends AccountUpsertArgs>(
    args: Subset<T, AccountUpsertArgs>
  ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyAccountArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateAccountArgs>(args: Subset<T, AggregateAccountArgs>): Promise<GetAccountAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Account.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__AccountClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Account findOne
 */
export type FindOneAccountArgs = {
  /**
   * Select specific fields to fetch from the Account
  **/
  select?: AccountSelect | null
  /**
   * Filter, which Account to fetch.
  **/
  where: AccountWhereUniqueInput
}


/**
 * Account findMany
 */
export type FindManyAccountArgs = {
  /**
   * Select specific fields to fetch from the Account
  **/
  select?: AccountSelect | null
  /**
   * Filter, which Accounts to fetch.
  **/
  where?: AccountWhereInput
  /**
   * Determine the order of the Accounts to fetch.
  **/
  orderBy?: Enumerable<AccountOrderByInput>
  /**
   * Sets the position for listing Accounts.
  **/
  cursor?: AccountWhereUniqueInput
  /**
   * The number of Accounts to fetch. If negative number, it will take Accounts before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Accounts.
  **/
  skip?: number
  distinct?: Enumerable<AccountDistinctFieldEnum>
}


/**
 * Account create
 */
export type AccountCreateArgs = {
  /**
   * Select specific fields to fetch from the Account
  **/
  select?: AccountSelect | null
  /**
   * The data needed to create a Account.
  **/
  data: AccountCreateInput
}


/**
 * Account update
 */
export type AccountUpdateArgs = {
  /**
   * Select specific fields to fetch from the Account
  **/
  select?: AccountSelect | null
  /**
   * The data needed to update a Account.
  **/
  data: AccountUpdateInput
  /**
   * Choose, which Account to update.
  **/
  where: AccountWhereUniqueInput
}


/**
 * Account updateMany
 */
export type AccountUpdateManyArgs = {
  data: AccountUpdateManyMutationInput
  where?: AccountWhereInput
}


/**
 * Account upsert
 */
export type AccountUpsertArgs = {
  /**
   * Select specific fields to fetch from the Account
  **/
  select?: AccountSelect | null
  /**
   * The filter to search for the Account to update in case it exists.
  **/
  where: AccountWhereUniqueInput
  /**
   * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
  **/
  create: AccountCreateInput
  /**
   * In case the Account was found with the provided `where` argument, update it with this data.
  **/
  update: AccountUpdateInput
}


/**
 * Account delete
 */
export type AccountDeleteArgs = {
  /**
   * Select specific fields to fetch from the Account
  **/
  select?: AccountSelect | null
  /**
   * Filter which Account to delete.
  **/
  where: AccountWhereUniqueInput
}


/**
 * Account deleteMany
 */
export type AccountDeleteManyArgs = {
  where?: AccountWhereInput
}


/**
 * Account without action
 */
export type AccountArgs = {
  /**
   * Select specific fields to fetch from the Account
  **/
  select?: AccountSelect | null
}



/**
 * Model Session
 */

export type Session = {
  id: number
  userId: number
  expires: Date
  sessionToken: string
  accessToken: string
  createdAt: Date
  updatedAt: Date
}


export type AggregateSession = {
  count: number
  avg: SessionAvgAggregateOutputType | null
  sum: SessionSumAggregateOutputType | null
  min: SessionMinAggregateOutputType | null
  max: SessionMaxAggregateOutputType | null
}

export type SessionAvgAggregateOutputType = {
  id: number
  userId: number
}

export type SessionSumAggregateOutputType = {
  id: number
  userId: number
}

export type SessionMinAggregateOutputType = {
  id: number
  userId: number
}

export type SessionMaxAggregateOutputType = {
  id: number
  userId: number
}


export type SessionAvgAggregateInputType = {
  id?: true
  userId?: true
}

export type SessionSumAggregateInputType = {
  id?: true
  userId?: true
}

export type SessionMinAggregateInputType = {
  id?: true
  userId?: true
}

export type SessionMaxAggregateInputType = {
  id?: true
  userId?: true
}

export type AggregateSessionArgs = {
  where?: SessionWhereInput
  orderBy?: Enumerable<SessionOrderByInput>
  cursor?: SessionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<SessionDistinctFieldEnum>
  count?: true
  avg?: SessionAvgAggregateInputType
  sum?: SessionSumAggregateInputType
  min?: SessionMinAggregateInputType
  max?: SessionMaxAggregateInputType
}

export type GetSessionAggregateType<T extends AggregateSessionArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetSessionAggregateScalarType<T[P]>
}

export type GetSessionAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof SessionAvgAggregateOutputType ? SessionAvgAggregateOutputType[P] : never
}
    
    

export type SessionSelect = {
  id?: boolean
  userId?: boolean
  expires?: boolean
  sessionToken?: boolean
  accessToken?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type SessionGetPayload<
  S extends boolean | null | undefined | SessionArgs,
  U = keyof S
> = S extends true
  ? Session
  : S extends undefined
  ? never
  : S extends SessionArgs | FindManySessionArgs
  ? 'include' extends U
    ? Session 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Session ? Session[P]
: 
 never
    }
  : Session
: Session


export interface SessionDelegate {
  /**
   * Find zero or one Session.
   * @param {FindOneSessionArgs} args - Arguments to find a Session
   * @example
   * // Get one Session
   * const session = await prisma.session.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneSessionArgs>(
    args: Subset<T, FindOneSessionArgs>
  ): CheckSelect<T, Prisma__SessionClient<Session | null>, Prisma__SessionClient<SessionGetPayload<T> | null>>
  /**
   * Find zero or more Sessions.
   * @param {FindManySessionArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Sessions
   * const sessions = await prisma.session.findMany()
   * 
   * // Get first 10 Sessions
   * const sessions = await prisma.session.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManySessionArgs>(
    args?: Subset<T, FindManySessionArgs>
  ): CheckSelect<T, Promise<Array<Session>>, Promise<Array<SessionGetPayload<T>>>>
  /**
   * Create a Session.
   * @param {SessionCreateArgs} args - Arguments to create a Session.
   * @example
   * // Create one Session
   * const Session = await prisma.session.create({
   *   data: {
   *     // ... data to create a Session
   *   }
   * })
   * 
  **/
  create<T extends SessionCreateArgs>(
    args: Subset<T, SessionCreateArgs>
  ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>
  /**
   * Delete a Session.
   * @param {SessionDeleteArgs} args - Arguments to delete one Session.
   * @example
   * // Delete one Session
   * const Session = await prisma.session.delete({
   *   where: {
   *     // ... filter to delete one Session
   *   }
   * })
   * 
  **/
  delete<T extends SessionDeleteArgs>(
    args: Subset<T, SessionDeleteArgs>
  ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>
  /**
   * Update one Session.
   * @param {SessionUpdateArgs} args - Arguments to update one Session.
   * @example
   * // Update one Session
   * const session = await prisma.session.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends SessionUpdateArgs>(
    args: Subset<T, SessionUpdateArgs>
  ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>
  /**
   * Delete zero or more Sessions.
   * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
   * @example
   * // Delete a few Sessions
   * const { count } = await prisma.session.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends SessionDeleteManyArgs>(
    args: Subset<T, SessionDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Sessions.
   * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Sessions
   * const session = await prisma.session.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends SessionUpdateManyArgs>(
    args: Subset<T, SessionUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Session.
   * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
   * @example
   * // Update or create a Session
   * const session = await prisma.session.upsert({
   *   create: {
   *     // ... data to create a Session
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Session we want to update
   *   }
   * })
  **/
  upsert<T extends SessionUpsertArgs>(
    args: Subset<T, SessionUpsertArgs>
  ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManySessionArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateSessionArgs>(args: Subset<T, AggregateSessionArgs>): Promise<GetSessionAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Session.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__SessionClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Session findOne
 */
export type FindOneSessionArgs = {
  /**
   * Select specific fields to fetch from the Session
  **/
  select?: SessionSelect | null
  /**
   * Filter, which Session to fetch.
  **/
  where: SessionWhereUniqueInput
}


/**
 * Session findMany
 */
export type FindManySessionArgs = {
  /**
   * Select specific fields to fetch from the Session
  **/
  select?: SessionSelect | null
  /**
   * Filter, which Sessions to fetch.
  **/
  where?: SessionWhereInput
  /**
   * Determine the order of the Sessions to fetch.
  **/
  orderBy?: Enumerable<SessionOrderByInput>
  /**
   * Sets the position for listing Sessions.
  **/
  cursor?: SessionWhereUniqueInput
  /**
   * The number of Sessions to fetch. If negative number, it will take Sessions before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Sessions.
  **/
  skip?: number
  distinct?: Enumerable<SessionDistinctFieldEnum>
}


/**
 * Session create
 */
export type SessionCreateArgs = {
  /**
   * Select specific fields to fetch from the Session
  **/
  select?: SessionSelect | null
  /**
   * The data needed to create a Session.
  **/
  data: SessionCreateInput
}


/**
 * Session update
 */
export type SessionUpdateArgs = {
  /**
   * Select specific fields to fetch from the Session
  **/
  select?: SessionSelect | null
  /**
   * The data needed to update a Session.
  **/
  data: SessionUpdateInput
  /**
   * Choose, which Session to update.
  **/
  where: SessionWhereUniqueInput
}


/**
 * Session updateMany
 */
export type SessionUpdateManyArgs = {
  data: SessionUpdateManyMutationInput
  where?: SessionWhereInput
}


/**
 * Session upsert
 */
export type SessionUpsertArgs = {
  /**
   * Select specific fields to fetch from the Session
  **/
  select?: SessionSelect | null
  /**
   * The filter to search for the Session to update in case it exists.
  **/
  where: SessionWhereUniqueInput
  /**
   * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
  **/
  create: SessionCreateInput
  /**
   * In case the Session was found with the provided `where` argument, update it with this data.
  **/
  update: SessionUpdateInput
}


/**
 * Session delete
 */
export type SessionDeleteArgs = {
  /**
   * Select specific fields to fetch from the Session
  **/
  select?: SessionSelect | null
  /**
   * Filter which Session to delete.
  **/
  where: SessionWhereUniqueInput
}


/**
 * Session deleteMany
 */
export type SessionDeleteManyArgs = {
  where?: SessionWhereInput
}


/**
 * Session without action
 */
export type SessionArgs = {
  /**
   * Select specific fields to fetch from the Session
  **/
  select?: SessionSelect | null
}



/**
 * Model User
 */

export type User = {
  id: number
  name: string | null
  email: string | null
  emailVerified: Date | null
  image: string | null
  createdAt: Date
  updatedAt: Date
}


export type AggregateUser = {
  count: number
  avg: UserAvgAggregateOutputType | null
  sum: UserSumAggregateOutputType | null
  min: UserMinAggregateOutputType | null
  max: UserMaxAggregateOutputType | null
}

export type UserAvgAggregateOutputType = {
  id: number
}

export type UserSumAggregateOutputType = {
  id: number
}

export type UserMinAggregateOutputType = {
  id: number
}

export type UserMaxAggregateOutputType = {
  id: number
}


export type UserAvgAggregateInputType = {
  id?: true
}

export type UserSumAggregateInputType = {
  id?: true
}

export type UserMinAggregateInputType = {
  id?: true
}

export type UserMaxAggregateInputType = {
  id?: true
}

export type AggregateUserArgs = {
  where?: UserWhereInput
  orderBy?: Enumerable<UserOrderByInput>
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
  count?: true
  avg?: UserAvgAggregateInputType
  sum?: UserSumAggregateInputType
  min?: UserMinAggregateInputType
  max?: UserMaxAggregateInputType
}

export type GetUserAggregateType<T extends AggregateUserArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
}

export type GetUserAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
}
    
    

export type UserSelect = {
  id?: boolean
  name?: boolean
  email?: boolean
  emailVerified?: boolean
  image?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UserGetPayload<
  S extends boolean | null | undefined | UserArgs,
  U = keyof S
> = S extends true
  ? User
  : S extends undefined
  ? never
  : S extends UserArgs | FindManyUserArgs
  ? 'include' extends U
    ? User 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof User ? User[P]
: 
 never
    }
  : User
: User


export interface UserDelegate {
  /**
   * Find zero or one User.
   * @param {FindOneUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUserArgs>(
    args: Subset<T, FindOneUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find zero or more Users.
   * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyUserArgs>(
    args?: Subset<T, FindManyUserArgs>
  ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
  **/
  create<T extends UserCreateArgs>(
    args: Subset<T, UserCreateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
  **/
  delete<T extends UserDeleteArgs>(
    args: Subset<T, UserDeleteArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends UserUpdateArgs>(
    args: Subset<T, UserUpdateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends UserDeleteManyArgs>(
    args: Subset<T, UserDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Users.
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends UserUpdateManyArgs>(
    args: Subset<T, UserUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
  **/
  upsert<T extends UserUpsertArgs>(
    args: Subset<T, UserUpsertArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__UserClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * User findOne
 */
export type FindOneUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}


/**
 * User findMany
 */
export type FindManyUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: Enumerable<UserOrderByInput>
  /**
   * Sets the position for listing Users.
  **/
  cursor?: UserWhereUniqueInput
  /**
   * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Users.
  **/
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User create
 */
export type UserCreateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}


/**
 * User update
 */
export type UserUpdateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}


/**
 * User updateMany
 */
export type UserUpdateManyArgs = {
  data: UserUpdateManyMutationInput
  where?: UserWhereInput
}


/**
 * User upsert
 */
export type UserUpsertArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
  **/
  update: UserUpdateInput
}


/**
 * User delete
 */
export type UserDeleteArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}


/**
 * User deleteMany
 */
export type UserDeleteManyArgs = {
  where?: UserWhereInput
}


/**
 * User without action
 */
export type UserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
}



/**
 * Model VerificationRequest
 */

export type VerificationRequest = {
  id: number
  identifier: string
  token: string
  expires: Date
  createdAt: Date
  updatedAt: Date
}


export type AggregateVerificationRequest = {
  count: number
  avg: VerificationRequestAvgAggregateOutputType | null
  sum: VerificationRequestSumAggregateOutputType | null
  min: VerificationRequestMinAggregateOutputType | null
  max: VerificationRequestMaxAggregateOutputType | null
}

export type VerificationRequestAvgAggregateOutputType = {
  id: number
}

export type VerificationRequestSumAggregateOutputType = {
  id: number
}

export type VerificationRequestMinAggregateOutputType = {
  id: number
}

export type VerificationRequestMaxAggregateOutputType = {
  id: number
}


export type VerificationRequestAvgAggregateInputType = {
  id?: true
}

export type VerificationRequestSumAggregateInputType = {
  id?: true
}

export type VerificationRequestMinAggregateInputType = {
  id?: true
}

export type VerificationRequestMaxAggregateInputType = {
  id?: true
}

export type AggregateVerificationRequestArgs = {
  where?: VerificationRequestWhereInput
  orderBy?: Enumerable<VerificationRequestOrderByInput>
  cursor?: VerificationRequestWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<VerificationRequestDistinctFieldEnum>
  count?: true
  avg?: VerificationRequestAvgAggregateInputType
  sum?: VerificationRequestSumAggregateInputType
  min?: VerificationRequestMinAggregateInputType
  max?: VerificationRequestMaxAggregateInputType
}

export type GetVerificationRequestAggregateType<T extends AggregateVerificationRequestArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetVerificationRequestAggregateScalarType<T[P]>
}

export type GetVerificationRequestAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof VerificationRequestAvgAggregateOutputType ? VerificationRequestAvgAggregateOutputType[P] : never
}
    
    

export type VerificationRequestSelect = {
  id?: boolean
  identifier?: boolean
  token?: boolean
  expires?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type VerificationRequestGetPayload<
  S extends boolean | null | undefined | VerificationRequestArgs,
  U = keyof S
> = S extends true
  ? VerificationRequest
  : S extends undefined
  ? never
  : S extends VerificationRequestArgs | FindManyVerificationRequestArgs
  ? 'include' extends U
    ? VerificationRequest 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof VerificationRequest ? VerificationRequest[P]
: 
 never
    }
  : VerificationRequest
: VerificationRequest


export interface VerificationRequestDelegate {
  /**
   * Find zero or one VerificationRequest.
   * @param {FindOneVerificationRequestArgs} args - Arguments to find a VerificationRequest
   * @example
   * // Get one VerificationRequest
   * const verificationRequest = await prisma.verificationRequest.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneVerificationRequestArgs>(
    args: Subset<T, FindOneVerificationRequestArgs>
  ): CheckSelect<T, Prisma__VerificationRequestClient<VerificationRequest | null>, Prisma__VerificationRequestClient<VerificationRequestGetPayload<T> | null>>
  /**
   * Find zero or more VerificationRequests.
   * @param {FindManyVerificationRequestArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all VerificationRequests
   * const verificationRequests = await prisma.verificationRequest.findMany()
   * 
   * // Get first 10 VerificationRequests
   * const verificationRequests = await prisma.verificationRequest.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const verificationRequestWithIdOnly = await prisma.verificationRequest.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyVerificationRequestArgs>(
    args?: Subset<T, FindManyVerificationRequestArgs>
  ): CheckSelect<T, Promise<Array<VerificationRequest>>, Promise<Array<VerificationRequestGetPayload<T>>>>
  /**
   * Create a VerificationRequest.
   * @param {VerificationRequestCreateArgs} args - Arguments to create a VerificationRequest.
   * @example
   * // Create one VerificationRequest
   * const VerificationRequest = await prisma.verificationRequest.create({
   *   data: {
   *     // ... data to create a VerificationRequest
   *   }
   * })
   * 
  **/
  create<T extends VerificationRequestCreateArgs>(
    args: Subset<T, VerificationRequestCreateArgs>
  ): CheckSelect<T, Prisma__VerificationRequestClient<VerificationRequest>, Prisma__VerificationRequestClient<VerificationRequestGetPayload<T>>>
  /**
   * Delete a VerificationRequest.
   * @param {VerificationRequestDeleteArgs} args - Arguments to delete one VerificationRequest.
   * @example
   * // Delete one VerificationRequest
   * const VerificationRequest = await prisma.verificationRequest.delete({
   *   where: {
   *     // ... filter to delete one VerificationRequest
   *   }
   * })
   * 
  **/
  delete<T extends VerificationRequestDeleteArgs>(
    args: Subset<T, VerificationRequestDeleteArgs>
  ): CheckSelect<T, Prisma__VerificationRequestClient<VerificationRequest>, Prisma__VerificationRequestClient<VerificationRequestGetPayload<T>>>
  /**
   * Update one VerificationRequest.
   * @param {VerificationRequestUpdateArgs} args - Arguments to update one VerificationRequest.
   * @example
   * // Update one VerificationRequest
   * const verificationRequest = await prisma.verificationRequest.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends VerificationRequestUpdateArgs>(
    args: Subset<T, VerificationRequestUpdateArgs>
  ): CheckSelect<T, Prisma__VerificationRequestClient<VerificationRequest>, Prisma__VerificationRequestClient<VerificationRequestGetPayload<T>>>
  /**
   * Delete zero or more VerificationRequests.
   * @param {VerificationRequestDeleteManyArgs} args - Arguments to filter VerificationRequests to delete.
   * @example
   * // Delete a few VerificationRequests
   * const { count } = await prisma.verificationRequest.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends VerificationRequestDeleteManyArgs>(
    args: Subset<T, VerificationRequestDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more VerificationRequests.
   * @param {VerificationRequestUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many VerificationRequests
   * const verificationRequest = await prisma.verificationRequest.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends VerificationRequestUpdateManyArgs>(
    args: Subset<T, VerificationRequestUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one VerificationRequest.
   * @param {VerificationRequestUpsertArgs} args - Arguments to update or create a VerificationRequest.
   * @example
   * // Update or create a VerificationRequest
   * const verificationRequest = await prisma.verificationRequest.upsert({
   *   create: {
   *     // ... data to create a VerificationRequest
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the VerificationRequest we want to update
   *   }
   * })
  **/
  upsert<T extends VerificationRequestUpsertArgs>(
    args: Subset<T, VerificationRequestUpsertArgs>
  ): CheckSelect<T, Prisma__VerificationRequestClient<VerificationRequest>, Prisma__VerificationRequestClient<VerificationRequestGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyVerificationRequestArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateVerificationRequestArgs>(args: Subset<T, AggregateVerificationRequestArgs>): Promise<GetVerificationRequestAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for VerificationRequest.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__VerificationRequestClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * VerificationRequest findOne
 */
export type FindOneVerificationRequestArgs = {
  /**
   * Select specific fields to fetch from the VerificationRequest
  **/
  select?: VerificationRequestSelect | null
  /**
   * Filter, which VerificationRequest to fetch.
  **/
  where: VerificationRequestWhereUniqueInput
}


/**
 * VerificationRequest findMany
 */
export type FindManyVerificationRequestArgs = {
  /**
   * Select specific fields to fetch from the VerificationRequest
  **/
  select?: VerificationRequestSelect | null
  /**
   * Filter, which VerificationRequests to fetch.
  **/
  where?: VerificationRequestWhereInput
  /**
   * Determine the order of the VerificationRequests to fetch.
  **/
  orderBy?: Enumerable<VerificationRequestOrderByInput>
  /**
   * Sets the position for listing VerificationRequests.
  **/
  cursor?: VerificationRequestWhereUniqueInput
  /**
   * The number of VerificationRequests to fetch. If negative number, it will take VerificationRequests before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` VerificationRequests.
  **/
  skip?: number
  distinct?: Enumerable<VerificationRequestDistinctFieldEnum>
}


/**
 * VerificationRequest create
 */
export type VerificationRequestCreateArgs = {
  /**
   * Select specific fields to fetch from the VerificationRequest
  **/
  select?: VerificationRequestSelect | null
  /**
   * The data needed to create a VerificationRequest.
  **/
  data: VerificationRequestCreateInput
}


/**
 * VerificationRequest update
 */
export type VerificationRequestUpdateArgs = {
  /**
   * Select specific fields to fetch from the VerificationRequest
  **/
  select?: VerificationRequestSelect | null
  /**
   * The data needed to update a VerificationRequest.
  **/
  data: VerificationRequestUpdateInput
  /**
   * Choose, which VerificationRequest to update.
  **/
  where: VerificationRequestWhereUniqueInput
}


/**
 * VerificationRequest updateMany
 */
export type VerificationRequestUpdateManyArgs = {
  data: VerificationRequestUpdateManyMutationInput
  where?: VerificationRequestWhereInput
}


/**
 * VerificationRequest upsert
 */
export type VerificationRequestUpsertArgs = {
  /**
   * Select specific fields to fetch from the VerificationRequest
  **/
  select?: VerificationRequestSelect | null
  /**
   * The filter to search for the VerificationRequest to update in case it exists.
  **/
  where: VerificationRequestWhereUniqueInput
  /**
   * In case the VerificationRequest found by the `where` argument doesn't exist, create a new VerificationRequest with this data.
  **/
  create: VerificationRequestCreateInput
  /**
   * In case the VerificationRequest was found with the provided `where` argument, update it with this data.
  **/
  update: VerificationRequestUpdateInput
}


/**
 * VerificationRequest delete
 */
export type VerificationRequestDeleteArgs = {
  /**
   * Select specific fields to fetch from the VerificationRequest
  **/
  select?: VerificationRequestSelect | null
  /**
   * Filter which VerificationRequest to delete.
  **/
  where: VerificationRequestWhereUniqueInput
}


/**
 * VerificationRequest deleteMany
 */
export type VerificationRequestDeleteManyArgs = {
  where?: VerificationRequestWhereInput
}


/**
 * VerificationRequest without action
 */
export type VerificationRequestArgs = {
  /**
   * Select specific fields to fetch from the VerificationRequest
  **/
  select?: VerificationRequestSelect | null
}



/**
 * Deep Input Types
 */


export type AccountWhereInput = {
  AND?: Enumerable<AccountWhereInput>
  OR?: Array<AccountWhereInput>
  NOT?: Enumerable<AccountWhereInput>
  id?: number | IntFilter
  compoundId?: string | StringFilter
  userId?: number | IntFilter
  providerType?: string | StringFilter
  providerId?: string | StringFilter
  providerAccountId?: string | StringFilter
  refreshToken?: string | StringNullableFilter | null
  accessToken?: string | StringNullableFilter | null
  accessTokenExpires?: Date | string | DateTimeNullableFilter | null
  createdAt?: Date | string | DateTimeFilter
  updatedAt?: Date | string | DateTimeFilter
}

export type AccountOrderByInput = {
  id?: SortOrder
  compoundId?: SortOrder
  userId?: SortOrder
  providerType?: SortOrder
  providerId?: SortOrder
  providerAccountId?: SortOrder
  refreshToken?: SortOrder
  accessToken?: SortOrder
  accessTokenExpires?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type AccountWhereUniqueInput = {
  id?: number
  compoundId?: string
  userId?: number
  providerId?: string
  providerAccountId?: string
}

export type SessionWhereInput = {
  AND?: Enumerable<SessionWhereInput>
  OR?: Array<SessionWhereInput>
  NOT?: Enumerable<SessionWhereInput>
  id?: number | IntFilter
  userId?: number | IntFilter
  expires?: Date | string | DateTimeFilter
  sessionToken?: string | StringFilter
  accessToken?: string | StringFilter
  createdAt?: Date | string | DateTimeFilter
  updatedAt?: Date | string | DateTimeFilter
}

export type SessionOrderByInput = {
  id?: SortOrder
  userId?: SortOrder
  expires?: SortOrder
  sessionToken?: SortOrder
  accessToken?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type SessionWhereUniqueInput = {
  id?: number
  sessionToken?: string
  accessToken?: string
}

export type UserWhereInput = {
  AND?: Enumerable<UserWhereInput>
  OR?: Array<UserWhereInput>
  NOT?: Enumerable<UserWhereInput>
  id?: number | IntFilter
  name?: string | StringNullableFilter | null
  email?: string | StringNullableFilter | null
  emailVerified?: Date | string | DateTimeNullableFilter | null
  image?: string | StringNullableFilter | null
  createdAt?: Date | string | DateTimeFilter
  updatedAt?: Date | string | DateTimeFilter
}

export type UserOrderByInput = {
  id?: SortOrder
  name?: SortOrder
  email?: SortOrder
  emailVerified?: SortOrder
  image?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type UserWhereUniqueInput = {
  id?: number
  email?: string | null
}

export type VerificationRequestWhereInput = {
  AND?: Enumerable<VerificationRequestWhereInput>
  OR?: Array<VerificationRequestWhereInput>
  NOT?: Enumerable<VerificationRequestWhereInput>
  id?: number | IntFilter
  identifier?: string | StringFilter
  token?: string | StringFilter
  expires?: Date | string | DateTimeFilter
  createdAt?: Date | string | DateTimeFilter
  updatedAt?: Date | string | DateTimeFilter
}

export type VerificationRequestOrderByInput = {
  id?: SortOrder
  identifier?: SortOrder
  token?: SortOrder
  expires?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type VerificationRequestWhereUniqueInput = {
  id?: number
  token?: string
}

export type AccountCreateInput = {
  compoundId: string
  userId: number
  providerType: string
  providerId: string
  providerAccountId: string
  refreshToken?: string | null
  accessToken?: string | null
  accessTokenExpires?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AccountUpdateInput = {
  compoundId?: string | StringFieldUpdateOperationsInput
  userId?: number | IntFieldUpdateOperationsInput
  providerType?: string | StringFieldUpdateOperationsInput
  providerId?: string | StringFieldUpdateOperationsInput
  providerAccountId?: string | StringFieldUpdateOperationsInput
  refreshToken?: string | NullableStringFieldUpdateOperationsInput | null
  accessToken?: string | NullableStringFieldUpdateOperationsInput | null
  accessTokenExpires?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
}

export type AccountUpdateManyMutationInput = {
  compoundId?: string | StringFieldUpdateOperationsInput
  userId?: number | IntFieldUpdateOperationsInput
  providerType?: string | StringFieldUpdateOperationsInput
  providerId?: string | StringFieldUpdateOperationsInput
  providerAccountId?: string | StringFieldUpdateOperationsInput
  refreshToken?: string | NullableStringFieldUpdateOperationsInput | null
  accessToken?: string | NullableStringFieldUpdateOperationsInput | null
  accessTokenExpires?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
}

export type SessionCreateInput = {
  userId: number
  expires: Date | string
  sessionToken: string
  accessToken: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SessionUpdateInput = {
  userId?: number | IntFieldUpdateOperationsInput
  expires?: Date | string | DateTimeFieldUpdateOperationsInput
  sessionToken?: string | StringFieldUpdateOperationsInput
  accessToken?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
}

export type SessionUpdateManyMutationInput = {
  userId?: number | IntFieldUpdateOperationsInput
  expires?: Date | string | DateTimeFieldUpdateOperationsInput
  sessionToken?: string | StringFieldUpdateOperationsInput
  accessToken?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
}

export type UserCreateInput = {
  name?: string | null
  email?: string | null
  emailVerified?: Date | string | null
  image?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserUpdateInput = {
  name?: string | NullableStringFieldUpdateOperationsInput | null
  email?: string | NullableStringFieldUpdateOperationsInput | null
  emailVerified?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  image?: string | NullableStringFieldUpdateOperationsInput | null
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
}

export type UserUpdateManyMutationInput = {
  name?: string | NullableStringFieldUpdateOperationsInput | null
  email?: string | NullableStringFieldUpdateOperationsInput | null
  emailVerified?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
  image?: string | NullableStringFieldUpdateOperationsInput | null
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
}

export type VerificationRequestCreateInput = {
  identifier: string
  token: string
  expires: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VerificationRequestUpdateInput = {
  identifier?: string | StringFieldUpdateOperationsInput
  token?: string | StringFieldUpdateOperationsInput
  expires?: Date | string | DateTimeFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
}

export type VerificationRequestUpdateManyMutationInput = {
  identifier?: string | StringFieldUpdateOperationsInput
  token?: string | StringFieldUpdateOperationsInput
  expires?: Date | string | DateTimeFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type StringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
  not?: string | NestedStringNullableFilter | null
}

export type DateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
  not?: Date | string | NestedDateTimeNullableFilter | null
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date | string>
  notIn?: Enumerable<Date | string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedIntFilter | null
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: NestedStringFilter | null
}

export type NestedStringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
  not?: NestedStringNullableFilter | null
}

export type NestedDateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
  not?: NestedDateTimeNullableFilter | null
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date | string>
  notIn?: Enumerable<Date | string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: NestedDateTimeFilter | null
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
